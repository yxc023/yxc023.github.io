buildscript {
    repositories {
        repositories {
            maven { url 'https://maven.aliyun.com/repository/public' }
            mavenCentral()
        }
    }
    dependencies {
        classpath 'com.aliyun.oss:aliyun-sdk-oss:3.8.0'
    }
}

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSS;
import com.aliyun.oss.OSSClientBuilder;
import com.aliyun.oss.OSSException
import com.aliyun.oss.model.DeleteObjectsRequest
import com.aliyun.oss.model.DeleteObjectsResult;
import com.aliyun.oss.model.PutObjectRequest;
import java.io.File;

plugins {
    id 'org.jbake.site' version '5.0.0'
    id 'org.ajoberstar.git-publish' version '3.0.1'
}


repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public"
    }
}

jbake {
    version = '2.6.4'
    srcDirName = 'src/jbake'
    destDirName = "$buildDir/jabke"
}
bakePreview {
    input = project.file('build/gitPublish')
}


gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'git@github.com:yxc023/yxc023.github.io.git'
    // repoUri = 'git@e.coding.net:yxc023/blog.yangxiaochen.com.git'
    // (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)

    // branch will be created if it doesn't exist
    branch = 'master'

    // generally, you don't need to touch this
    // repoDir = file("$buildDir/jbake") // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    // contents {
    //     from "$buildDir/jabke"
    // }

    // what to keep in the existing branch (include=keep)
    preserve {
        // include '1.0.0/**'
        include 'CNAME'
        include 'bdunion.txt'
        include 'ads.txt'
        include 'jd_root.txt'
    }

    // message used when committing changes
    // commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}


bake {
    output file("$buildDir/gitPublish")
    // dependsOn gitPublishReset
}
// gitPublishCommit.dependsOn bake


task pushOSS {
    doLast {
        String endpoint = project.property("aliyun.oss.endpoint")
        String accessKeyId = project.property("aliyun.oss.accessKeyId")
        String accessKeySecret = project.property("aliyun.oss.accessKeySecret")
        String bucketName = project.property("aliyun.oss.bucketName")

        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret)

        def listing = ossClient.listObjects(bucketName)
        DeleteObjectsResult deleteObjectsResult = ossClient.deleteObjects(
                new DeleteObjectsRequest(bucketName).withKeys(listing.objectSummaries.collect { it.key }));
        println "Delete oss: " + deleteObjectsResult.deletedObjects.size()

        fileTree("$buildDir/gitPublish").each { f ->
            def targetName = f.path.substring("$buildDir/gitPublish".size() + 1)
            PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, targetName, f);
            def result = ossClient.putObject(putObjectRequest)
            println "Sync oss: " + targetName
        }

        ossClient.shutdown()
    }
}

// ./gradlew gitPublishPush --no-daemon
// ./gradlew bake -x gitPublishReset